type Analysis
  {
    id: String!
    version: Integer
    categoryIds: [AnalysisCategory]
    analysisSetId: AnalysisSet
    orderedGroupings: [OrderedGroupingFactor]
    dataSubsetId: DataSubset
    dataset: String
    variable: String
    methodId: AnalysisMethod
    referencedAnalysisOperations: [ReferencedAnalysisOperation]
    results: [OperationResult]
  }

type AnalysisCategorization
  {
    id: String!
    label: String
    categories: [AnalysisCategory]!
  }

type AnalysisCategory
  {
    id: String!
    label: String
    subCategorizations: [AnalysisCategorization]
  }

type AnalysisGroup
  {
    id: String!
    condition: Condition
    label: String
    order: Integer!
    compoundExpression: CompoundGroupExpression
  }

type AnalysisMethod
  {
    name: String!
    id: String!
    label: String
    description: String
    operations: [Operation]!
  }

type AnalysisSet
  {
    id: String!
    condition: Condition
    label: String
    order: Integer!
    compoundExpression: CompoundSetExpression
  }

type CompoundExpression
  {
    logicalOperator: AndOr!
    whereClauses: [WhereClause]
  }

type CompoundGroupExpression
  {
    logicalOperator: AndOr!
    whereClauses: [Group]
  }

type CompoundSetExpression
  {
    logicalOperator: AndOr!
    whereClauses: [AnalysisSet]
  }

type CompoundSubsetExpression
  {
    logicalOperator: AndOr!
    whereClauses: [WhereClause]
  }

type Condition
  {
    dataset: String
    variable: String
    comparator: Comparator
    value: [String]
  }

type DataGroup
  {
    id: String!
    condition: Condition
    label: String
    order: Integer!
    compoundExpression: CompoundGroupExpression
  }

type DataGroupingFactor
  {
    id: String!
    label: String
    groupingVariable: String
    dataDriven: Boolean!
    groups: [DataGroup]
  }

type DataSubset
  {
    id: String!
    condition: Condition
    label: String
    compoundExpression: CompoundSubsetExpression
  }

type Display
  {
    name: String!
    id: String!
    version: Integer
    displayTitle: String
    displaySections: [DisplaySection]
  }

type DisplaySection
  {
    sectionType: SectionType
    subSections: [DisplaySubSection]
  }

type DisplaySubSection
  {
    id: String!
    order: Integer!
    text: String
  }

type File
  {
    name: String!
    fileType: FileType
    location: String
    style: String
  }

type Group
  {
    id: String!
    condition: Condition
    label: String
    order: Integer!
    compoundExpression: CompoundGroupExpression
  }

interface GroupingFactor
  {
    id: String!
    label: String
    groupingVariable: String
    dataDriven: Boolean!
    groups: [Group]
  }

interface NamedObject
  {
    name: String!
  }

type NestedList
  {
    listItems: [OrderedListItem]
  }

type Operation
  {
    name: String!
    id: String!
    label: String
    referencedOperationRelationships: [ReferencedOperationRelationship]
    resultPattern: String
  }

type OperationResult
  {
    operationId: Operation!
    resultGroups: [ResultGroup]
    rawValue: String
    formattedValue: String
  }

type OrderedGroupingFactor
  {
    order: Integer!
    groupingId: GroupingFactor
    dataGrouping: DataGroupingFactor
  }

type OrderedListItem
  {
    name: String!
    order: Integer!
    sublist: NestedList
    analysisId: Analysis
    outputId: Output
  }

type Output
  {
    id: String!
    version: Integer
    fileSpecifications: [File]
    outputDisplays: [OutputDisplay]
    categoryIds: [AnalysisCategory]
  }

type OutputDisplay
  {
    order: Integer!
    display: Display
  }

type ReferencedAnalysisOperation
  {
    referencedOperationId: ReferencedOperationRelationship
    analysisId: Analysis!
  }

type ReferencedOperationRelationship
  {
    id: String!
    referencedOperationRole: OperationRole!
    operationId: Operation!
    analysisId: Analysis
    description: String
  }

type ReportingEvent
  {
    name: String!
    listOfPlannedAnalyses: NestedList!
    listOfPlannedOutputs: NestedList
    analysisSets: [AnalysisSet]
    analysisGroupings: [SubjectGroupingFactor]
    dataSubsets: [DataSubset]
    globalDisplaySections: [DisplaySection]
    analysisCategorizations: [AnalysisCategorization]
    analyses: [Analysis]
    methods: [AnalysisMethod]
    outputs: [Output]
  }

type ResultGroup
  {
    groupingId: GroupingFactor
    groupId: Group
    groupValue: String
  }

type SubjectGroupingFactor
  {
    id: String!
    label: String
    groupingVariable: String
    dataDriven: Boolean!
    groups: [AnalysisGroup]
  }

type WhereClause
  {
    id: String!
    condition: Condition
    compoundExpression: CompoundExpression
  }

